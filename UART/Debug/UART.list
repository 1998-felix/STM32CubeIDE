
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800185c  0800185c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800185c  0800185c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800185c  0800185c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08001870  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08001870  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d06  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c2  00000000  00000000  00024d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00025f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  000264c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cfc  00000000  00000000  000269e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005df8  00000000  00000000  0003c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da21  00000000  00000000  000424dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bfefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e8  00000000  00000000  000bff50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800181c 	.word	0x0800181c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800181c 	.word	0x0800181c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9da 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f822 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b0 	bl	80002bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f85a 	bl	8000214 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f882 	bl	8000268 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	   while(HAL_UART_Receive(&huart1, Test2, 20, 30)) {
 8000164:	e00c      	b.n	8000180 <main+0x34>
		  if(strlen(Test2) != 0){
 8000166:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <main+0x48>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d008      	beq.n	8000180 <main+0x34>
		  HAL_UART_Transmit(&huart1, Test2, 20, 10);
 800016e:	230a      	movs	r3, #10
 8000170:	2214      	movs	r2, #20
 8000172:	4908      	ldr	r1, [pc, #32]	; (8000194 <main+0x48>)
 8000174:	4808      	ldr	r0, [pc, #32]	; (8000198 <main+0x4c>)
 8000176:	f001 f91c 	bl	80013b2 <HAL_UART_Transmit>
		  HAL_Delay (200);}
 800017a:	20c8      	movs	r0, #200	; 0xc8
 800017c:	f000 fa26 	bl	80005cc <HAL_Delay>
	   while(HAL_UART_Receive(&huart1, Test2, 20, 30)) {
 8000180:	231e      	movs	r3, #30
 8000182:	2214      	movs	r2, #20
 8000184:	4903      	ldr	r1, [pc, #12]	; (8000194 <main+0x48>)
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <main+0x4c>)
 8000188:	f001 f9a5 	bl	80014d6 <HAL_UART_Receive>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d1e9      	bne.n	8000166 <main+0x1a>
 8000192:	e7f5      	b.n	8000180 <main+0x34>
 8000194:	20000028 	.word	0x20000028
 8000198:	2000003c 	.word	0x2000003c

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	; 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f001 fb2e 	bl	800180c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2302      	movs	r3, #2
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c6:	2310      	movs	r3, #16
 80001c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ca:	2300      	movs	r3, #0
 80001cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fc86 	bl	8000ae4 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001de:	f000 f883 	bl	80002e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fef2 	bl	8000fe4 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000206:	f000 f86f 	bl	80002e8 <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	; 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 800021a:	4a12      	ldr	r2, [pc, #72]	; (8000264 <MX_USART1_UART_Init+0x50>)
 800021c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 8000220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 800023a:	220c      	movs	r2, #12
 800023c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_USART1_UART_Init+0x4c>)
 800024c:	f001 f864 	bl	8001318 <HAL_UART_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000256:	f000 f847 	bl	80002e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	2000003c 	.word	0x2000003c
 8000264:	40013800 	.word	0x40013800

08000268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <MX_USART2_UART_Init+0x50>)
 8000270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 8000274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 8000282:	2200      	movs	r2, #0
 8000284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 800028e:	220c      	movs	r2, #12
 8000290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <MX_USART2_UART_Init+0x4c>)
 80002a0:	f001 f83a 	bl	8001318 <HAL_UART_Init>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002aa:	f000 f81d 	bl	80002e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	2000007c 	.word	0x2000007c
 80002b8:	40004400 	.word	0x40004400

080002bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_GPIO_Init+0x28>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <MX_GPIO_Init+0x28>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <MX_GPIO_Init+0x28>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0304 	and.w	r3, r3, #4
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ec:	b672      	cpsid	i
}
 80002ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <Error_Handler+0x8>
	...

080002f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <HAL_MspInit+0x5c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <HAL_MspInit+0x5c>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <HAL_MspInit+0x5c>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <HAL_MspInit+0x5c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <HAL_MspInit+0x5c>)
 8000318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800031c:	61d3      	str	r3, [r2, #28]
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <HAL_MspInit+0x5c>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <HAL_MspInit+0x60>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <HAL_MspInit+0x60>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000
 8000354:	40010000 	.word	0x40010000

08000358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	; 0x28
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a37      	ldr	r2, [pc, #220]	; (8000450 <HAL_UART_MspInit+0xf8>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d132      	bne.n	80003de <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000378:	4b36      	ldr	r3, [pc, #216]	; (8000454 <HAL_UART_MspInit+0xfc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a35      	ldr	r2, [pc, #212]	; (8000454 <HAL_UART_MspInit+0xfc>)
 800037e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <HAL_UART_MspInit+0xfc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800038c:	617b      	str	r3, [r7, #20]
 800038e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b30      	ldr	r3, [pc, #192]	; (8000454 <HAL_UART_MspInit+0xfc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a2f      	ldr	r2, [pc, #188]	; (8000454 <HAL_UART_MspInit+0xfc>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <HAL_UART_MspInit+0xfc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	613b      	str	r3, [r7, #16]
 80003a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b2:	2303      	movs	r3, #3
 80003b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	4619      	mov	r1, r3
 80003bc:	4826      	ldr	r0, [pc, #152]	; (8000458 <HAL_UART_MspInit+0x100>)
 80003be:	f000 fa0d 	bl	80007dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	f107 0318 	add.w	r3, r7, #24
 80003d4:	4619      	mov	r1, r3
 80003d6:	4820      	ldr	r0, [pc, #128]	; (8000458 <HAL_UART_MspInit+0x100>)
 80003d8:	f000 fa00 	bl	80007dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003dc:	e034      	b.n	8000448 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <HAL_UART_MspInit+0x104>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d12f      	bne.n	8000448 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <HAL_UART_MspInit+0xfc>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4a19      	ldr	r2, [pc, #100]	; (8000454 <HAL_UART_MspInit+0xfc>)
 80003ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f2:	61d3      	str	r3, [r2, #28]
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <HAL_UART_MspInit+0xfc>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <HAL_UART_MspInit+0xfc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <HAL_UART_MspInit+0xfc>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_UART_MspInit+0xfc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000418:	2304      	movs	r3, #4
 800041a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041c:	2302      	movs	r3, #2
 800041e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000420:	2303      	movs	r3, #3
 8000422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4619      	mov	r1, r3
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <HAL_UART_MspInit+0x100>)
 800042c:	f000 f9d6 	bl	80007dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000430:	2308      	movs	r3, #8
 8000432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4619      	mov	r1, r3
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <HAL_UART_MspInit+0x100>)
 8000444:	f000 f9ca 	bl	80007dc <HAL_GPIO_Init>
}
 8000448:	bf00      	nop
 800044a:	3728      	adds	r7, #40	; 0x28
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40013800 	.word	0x40013800
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800
 800045c:	40004400 	.word	0x40004400

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a6:	f000 f875 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}

080004ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004be:	e003      	b.n	80004c8 <LoopCopyDataInit>

080004c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004c6:	3104      	adds	r1, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004d0:	d3f6      	bcc.n	80004c0 <CopyDataInit>
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004d4:	e002      	b.n	80004dc <LoopFillZerobss>

080004d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004d8:	f842 3b04 	str.w	r3, [r2], #4

080004dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004e0:	d3f9      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004e2:	f7ff ffe4 	bl	80004ae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e6:	f001 f96d 	bl	80017c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff fe2f 	bl	800014c <main>
  bx lr
 80004ee:	4770      	bx	lr
  ldr r3, =_sidata
 80004f0:	08001864 	.word	0x08001864
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80004fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000500:	200000d4 	.word	0x200000d4

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x28>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f92b 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f808 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f7ff fee6 	bl	80002f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f935 	bl	80007c2 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f90b 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000008 	.word	0x20000008
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x20>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000008 	.word	0x20000008
 80005b4:	200000d0 	.word	0x200000d0

080005b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	200000d0 	.word	0x200000d0

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff0 	bl	80005b8 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_Delay+0x44>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffe0 	bl	80005b8 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff90 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff49 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5e 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff90 	bl	80006cc <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5f 	bl	8000678 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ee:	e169      	b.n	8000ac4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007f0:	2201      	movs	r2, #1
 80007f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	4013      	ands	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	429a      	cmp	r2, r3
 800080a:	f040 8158 	bne.w	8000abe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4a9a      	ldr	r2, [pc, #616]	; (8000a7c <HAL_GPIO_Init+0x2a0>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d05e      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000818:	4a98      	ldr	r2, [pc, #608]	; (8000a7c <HAL_GPIO_Init+0x2a0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d875      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 800081e:	4a98      	ldr	r2, [pc, #608]	; (8000a80 <HAL_GPIO_Init+0x2a4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d058      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000824:	4a96      	ldr	r2, [pc, #600]	; (8000a80 <HAL_GPIO_Init+0x2a4>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d86f      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 800082a:	4a96      	ldr	r2, [pc, #600]	; (8000a84 <HAL_GPIO_Init+0x2a8>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d052      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000830:	4a94      	ldr	r2, [pc, #592]	; (8000a84 <HAL_GPIO_Init+0x2a8>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d869      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 8000836:	4a94      	ldr	r2, [pc, #592]	; (8000a88 <HAL_GPIO_Init+0x2ac>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d04c      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 800083c:	4a92      	ldr	r2, [pc, #584]	; (8000a88 <HAL_GPIO_Init+0x2ac>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d863      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 8000842:	4a92      	ldr	r2, [pc, #584]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d046      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000848:	4a90      	ldr	r2, [pc, #576]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d85d      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 800084e:	2b12      	cmp	r3, #18
 8000850:	d82a      	bhi.n	80008a8 <HAL_GPIO_Init+0xcc>
 8000852:	2b12      	cmp	r3, #18
 8000854:	d859      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <HAL_GPIO_Init+0x80>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	080008d7 	.word	0x080008d7
 8000860:	080008b1 	.word	0x080008b1
 8000864:	080008c3 	.word	0x080008c3
 8000868:	08000905 	.word	0x08000905
 800086c:	0800090b 	.word	0x0800090b
 8000870:	0800090b 	.word	0x0800090b
 8000874:	0800090b 	.word	0x0800090b
 8000878:	0800090b 	.word	0x0800090b
 800087c:	0800090b 	.word	0x0800090b
 8000880:	0800090b 	.word	0x0800090b
 8000884:	0800090b 	.word	0x0800090b
 8000888:	0800090b 	.word	0x0800090b
 800088c:	0800090b 	.word	0x0800090b
 8000890:	0800090b 	.word	0x0800090b
 8000894:	0800090b 	.word	0x0800090b
 8000898:	0800090b 	.word	0x0800090b
 800089c:	0800090b 	.word	0x0800090b
 80008a0:	080008b9 	.word	0x080008b9
 80008a4:	080008cd 	.word	0x080008cd
 80008a8:	4a79      	ldr	r2, [pc, #484]	; (8000a90 <HAL_GPIO_Init+0x2b4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d013      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ae:	e02c      	b.n	800090a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	623b      	str	r3, [r7, #32]
          break;
 80008b6:	e029      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	3304      	adds	r3, #4
 80008be:	623b      	str	r3, [r7, #32]
          break;
 80008c0:	e024      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	3308      	adds	r3, #8
 80008c8:	623b      	str	r3, [r7, #32]
          break;
 80008ca:	e01f      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	330c      	adds	r3, #12
 80008d2:	623b      	str	r3, [r7, #32]
          break;
 80008d4:	e01a      	b.n	800090c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008de:	2304      	movs	r3, #4
 80008e0:	623b      	str	r3, [r7, #32]
          break;
 80008e2:	e013      	b.n	800090c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d105      	bne.n	80008f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ec:	2308      	movs	r3, #8
 80008ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	611a      	str	r2, [r3, #16]
          break;
 80008f6:	e009      	b.n	800090c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f8:	2308      	movs	r3, #8
 80008fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	615a      	str	r2, [r3, #20]
          break;
 8000902:	e003      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e000      	b.n	800090c <HAL_GPIO_Init+0x130>
          break;
 800090a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	2bff      	cmp	r3, #255	; 0xff
 8000910:	d801      	bhi.n	8000916 <HAL_GPIO_Init+0x13a>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	e001      	b.n	800091a <HAL_GPIO_Init+0x13e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3304      	adds	r3, #4
 800091a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2bff      	cmp	r3, #255	; 0xff
 8000920:	d802      	bhi.n	8000928 <HAL_GPIO_Init+0x14c>
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	e002      	b.n	800092e <HAL_GPIO_Init+0x152>
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3b08      	subs	r3, #8
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	210f      	movs	r1, #15
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	401a      	ands	r2, r3
 8000940:	6a39      	ldr	r1, [r7, #32]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	431a      	orrs	r2, r3
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 80b1 	beq.w	8000abe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800095c:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <HAL_GPIO_Init+0x2b8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <HAL_GPIO_Init+0x2b8>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <HAL_GPIO_Init+0x2b8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000974:	4a48      	ldr	r2, [pc, #288]	; (8000a98 <HAL_GPIO_Init+0x2bc>)
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a40      	ldr	r2, [pc, #256]	; (8000a9c <HAL_GPIO_Init+0x2c0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d013      	beq.n	80009c8 <HAL_GPIO_Init+0x1ec>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <HAL_GPIO_Init+0x2c4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d00d      	beq.n	80009c4 <HAL_GPIO_Init+0x1e8>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a3e      	ldr	r2, [pc, #248]	; (8000aa4 <HAL_GPIO_Init+0x2c8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d007      	beq.n	80009c0 <HAL_GPIO_Init+0x1e4>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <HAL_GPIO_Init+0x2cc>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d101      	bne.n	80009bc <HAL_GPIO_Init+0x1e0>
 80009b8:	2303      	movs	r3, #3
 80009ba:	e006      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009bc:	2304      	movs	r3, #4
 80009be:	e004      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e002      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009c4:	2301      	movs	r3, #1
 80009c6:	e000      	b.n	80009ca <HAL_GPIO_Init+0x1ee>
 80009c8:	2300      	movs	r3, #0
 80009ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009cc:	f002 0203 	and.w	r2, r2, #3
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	4093      	lsls	r3, r2
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009da:	492f      	ldr	r1, [pc, #188]	; (8000a98 <HAL_GPIO_Init+0x2bc>)
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d006      	beq.n	8000a02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	492c      	ldr	r1, [pc, #176]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4928      	ldr	r1, [pc, #160]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	4922      	ldr	r1, [pc, #136]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	604b      	str	r3, [r1, #4]
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	491e      	ldr	r1, [pc, #120]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	4918      	ldr	r1, [pc, #96]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4914      	ldr	r1, [pc, #80]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d021      	beq.n	8000ab0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	490e      	ldr	r1, [pc, #56]	; (8000aac <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
 8000a78:	e021      	b.n	8000abe <HAL_GPIO_Init+0x2e2>
 8000a7a:	bf00      	nop
 8000a7c:	10320000 	.word	0x10320000
 8000a80:	10310000 	.word	0x10310000
 8000a84:	10220000 	.word	0x10220000
 8000a88:	10210000 	.word	0x10210000
 8000a8c:	10120000 	.word	0x10120000
 8000a90:	10110000 	.word	0x10110000
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40010c00 	.word	0x40010c00
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40011400 	.word	0x40011400
 8000aac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4909      	ldr	r1, [pc, #36]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f47f ae8e 	bne.w	80007f0 <HAL_GPIO_Init+0x14>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	372c      	adds	r7, #44	; 0x2c
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e26c      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8087 	beq.w	8000c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b04:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 030c 	and.w	r3, r3, #12
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d00c      	beq.n	8000b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b10:	4b8f      	ldr	r3, [pc, #572]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 030c 	and.w	r3, r3, #12
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d112      	bne.n	8000b42 <HAL_RCC_OscConfig+0x5e>
 8000b1c:	4b8c      	ldr	r3, [pc, #560]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b28:	d10b      	bne.n	8000b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2a:	4b89      	ldr	r3, [pc, #548]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d06c      	beq.n	8000c10 <HAL_RCC_OscConfig+0x12c>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d168      	bne.n	8000c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e246      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4a:	d106      	bne.n	8000b5a <HAL_RCC_OscConfig+0x76>
 8000b4c:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a7f      	ldr	r2, [pc, #508]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e02e      	b.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0x98>
 8000b62:	4b7b      	ldr	r3, [pc, #492]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a7a      	ldr	r2, [pc, #488]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b78      	ldr	r3, [pc, #480]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a77      	ldr	r2, [pc, #476]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e01d      	b.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b84:	d10c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0xbc>
 8000b86:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a71      	ldr	r2, [pc, #452]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a6e      	ldr	r2, [pc, #440]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e00b      	b.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
 8000ba0:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a6a      	ldr	r2, [pc, #424]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a67      	ldr	r2, [pc, #412]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d013      	beq.n	8000be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fcfa 	bl	80005b8 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fcf6 	bl	80005b8 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e1fa      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bda:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f0      	beq.n	8000bc8 <HAL_RCC_OscConfig+0xe4>
 8000be6:	e014      	b.n	8000c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fce6 	bl	80005b8 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fce2 	bl	80005b8 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b64      	cmp	r3, #100	; 0x64
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e1e6      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c02:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x10c>
 8000c0e:	e000      	b.n	8000c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d063      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 030c 	and.w	r3, r3, #12
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00b      	beq.n	8000c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d11c      	bne.n	8000c70 <HAL_RCC_OscConfig+0x18c>
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d116      	bne.n	8000c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <HAL_RCC_OscConfig+0x176>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d001      	beq.n	8000c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e1ba      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4939      	ldr	r1, [pc, #228]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6e:	e03a      	b.n	8000ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d020      	beq.n	8000cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fc9b 	bl	80005b8 <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c86:	f7ff fc97 	bl	80005b8 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e19b      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f0      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4927      	ldr	r1, [pc, #156]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]
 8000cb8:	e015      	b.n	8000ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fc7a 	bl	80005b8 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc8:	f7ff fc76 	bl	80005b8 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e17a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d03a      	beq.n	8000d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d019      	beq.n	8000d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_RCC_OscConfig+0x274>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d00:	f7ff fc5a 	bl	80005b8 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d08:	f7ff fc56 	bl	80005b8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e15a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fad8 	bl	80012dc <RCC_Delay>
 8000d2c:	e01c      	b.n	8000d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_RCC_OscConfig+0x274>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d34:	f7ff fc40 	bl	80005b8 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3a:	e00f      	b.n	8000d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc3c 	bl	80005b8 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d908      	bls.n	8000d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e140      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	42420000 	.word	0x42420000
 8000d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	4b9e      	ldr	r3, [pc, #632]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1e9      	bne.n	8000d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80a6 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7a:	4b97      	ldr	r3, [pc, #604]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10d      	bne.n	8000da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b94      	ldr	r3, [pc, #592]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a93      	ldr	r2, [pc, #588]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b91      	ldr	r3, [pc, #580]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da2:	4b8e      	ldr	r3, [pc, #568]	; (8000fdc <HAL_RCC_OscConfig+0x4f8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d118      	bne.n	8000de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dae:	4b8b      	ldr	r3, [pc, #556]	; (8000fdc <HAL_RCC_OscConfig+0x4f8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a8a      	ldr	r2, [pc, #552]	; (8000fdc <HAL_RCC_OscConfig+0x4f8>)
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fbfd 	bl	80005b8 <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc2:	f7ff fbf9 	bl	80005b8 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b64      	cmp	r3, #100	; 0x64
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e0fd      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd4:	4b81      	ldr	r3, [pc, #516]	; (8000fdc <HAL_RCC_OscConfig+0x4f8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x312>
 8000de8:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	e02d      	b.n	8000e52 <HAL_RCC_OscConfig+0x36e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x334>
 8000dfe:	4b76      	ldr	r3, [pc, #472]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4a75      	ldr	r2, [pc, #468]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6213      	str	r3, [r2, #32]
 8000e0a:	4b73      	ldr	r3, [pc, #460]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4a72      	ldr	r2, [pc, #456]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	6213      	str	r3, [r2, #32]
 8000e16:	e01c      	b.n	8000e52 <HAL_RCC_OscConfig+0x36e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b05      	cmp	r3, #5
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_OscConfig+0x356>
 8000e20:	4b6d      	ldr	r3, [pc, #436]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4a6c      	ldr	r2, [pc, #432]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6213      	str	r3, [r2, #32]
 8000e2c:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6213      	str	r3, [r2, #32]
 8000e38:	e00b      	b.n	8000e52 <HAL_RCC_OscConfig+0x36e>
 8000e3a:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	4a66      	ldr	r2, [pc, #408]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6213      	str	r3, [r2, #32]
 8000e46:	4b64      	ldr	r3, [pc, #400]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a63      	ldr	r2, [pc, #396]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	f023 0304 	bic.w	r3, r3, #4
 8000e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d015      	beq.n	8000e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fbad 	bl	80005b8 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fba9 	bl	80005b8 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e0ab      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e78:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0ee      	beq.n	8000e62 <HAL_RCC_OscConfig+0x37e>
 8000e84:	e014      	b.n	8000eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e86:	f7ff fb97 	bl	80005b8 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fb93 	bl	80005b8 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e095      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1ee      	bne.n	8000e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d105      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb6:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8081 	beq.w	8000fce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ecc:	4b42      	ldr	r3, [pc, #264]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d061      	beq.n	8000f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d146      	bne.n	8000f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <HAL_RCC_OscConfig+0x4fc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fb67 	bl	80005b8 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eee:	f7ff fb63 	bl	80005b8 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e067      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f0      	bne.n	8000eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f14:	d108      	bne.n	8000f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	492d      	ldr	r1, [pc, #180]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a19      	ldr	r1, [r3, #32]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	4927      	ldr	r1, [pc, #156]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <HAL_RCC_OscConfig+0x4fc>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb37 	bl	80005b8 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb33 	bl	80005b8 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e037      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x46a>
 8000f6c:	e02f      	b.n	8000fce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_RCC_OscConfig+0x4fc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb20 	bl	80005b8 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fb1c 	bl	80005b8 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e020      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x498>
 8000f9a:	e018      	b.n	8000fce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e013      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d001      	beq.n	8000fce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40007000 	.word	0x40007000
 8000fe0:	42420060 	.word	0x42420060

08000fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0d0      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d910      	bls.n	8001028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001006:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 0207 	bic.w	r2, r3, #7
 800100e:	4965      	ldr	r1, [pc, #404]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001016:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d001      	beq.n	8001028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0b8      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001040:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a58      	ldr	r2, [pc, #352]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800104a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001058:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001064:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	494d      	ldr	r1, [pc, #308]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001072:	4313      	orrs	r3, r2
 8001074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d040      	beq.n	8001104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d115      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e07f      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d107      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e073      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e06b      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c2:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f023 0203 	bic.w	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4936      	ldr	r1, [pc, #216]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010d4:	f7ff fa70 	bl	80005b8 <HAL_GetTick>
 80010d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010da:	e00a      	b.n	80010f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010dc:	f7ff fa6c 	bl	80005b8 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e053      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 020c 	and.w	r2, r3, #12
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	429a      	cmp	r2, r3
 8001102:	d1eb      	bne.n	80010dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d210      	bcs.n	8001134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 0207 	bic.w	r2, r3, #7
 800111a:	4922      	ldr	r1, [pc, #136]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d001      	beq.n	8001134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e032      	b.n	800119a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	4916      	ldr	r1, [pc, #88]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	490e      	ldr	r1, [pc, #56]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001172:	f000 f821 	bl	80011b8 <HAL_RCC_GetSysClockFreq>
 8001176:	4602      	mov	r2, r0
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RCC_ClockConfig+0x1c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	490a      	ldr	r1, [pc, #40]	; (80011ac <HAL_RCC_ClockConfig+0x1c8>)
 8001184:	5ccb      	ldrb	r3, [r1, r3]
 8001186:	fa22 f303 	lsr.w	r3, r2, r3
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_RCC_ClockConfig+0x1cc>)
 800118c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9ce 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	08001844 	.word	0x08001844
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011b8:	b490      	push	{r4, r7}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011c0:	1d3c      	adds	r4, r7, #4
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011c8:	f240 2301 	movw	r3, #513	; 0x201
 80011cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_RCC_GetSysClockFreq+0xb4>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d002      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x40>
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_GetSysClockFreq+0x46>
 80011f6:	e02d      	b.n	8001254 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011fa:	623b      	str	r3, [r7, #32]
      break;
 80011fc:	e02d      	b.n	800125a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	0c9b      	lsrs	r3, r3, #18
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800120a:	4413      	add	r3, r2
 800120c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001210:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_RCC_GetSysClockFreq+0xb4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	0c5b      	lsrs	r3, r3, #17
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800122a:	4413      	add	r3, r2
 800122c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001230:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001236:	fb02 f203 	mul.w	r2, r2, r3
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
 8001242:	e004      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	623b      	str	r3, [r7, #32]
      break;
 8001252:	e002      	b.n	800125a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001256:	623b      	str	r3, [r7, #32]
      break;
 8001258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800125a:	6a3b      	ldr	r3, [r7, #32]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bc90      	pop	{r4, r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	08001834 	.word	0x08001834
 800126c:	40021000 	.word	0x40021000
 8001270:	007a1200 	.word	0x007a1200
 8001274:	003d0900 	.word	0x003d0900

08001278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_RCC_GetHCLKFreq+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001290:	f7ff fff2 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	4903      	ldr	r1, [pc, #12]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	08001854 	.word	0x08001854

080012b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012b8:	f7ff ffde 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	0adb      	lsrs	r3, r3, #11
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	4903      	ldr	r1, [pc, #12]	; (80012d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	08001854 	.word	0x08001854

080012dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <RCC_Delay+0x34>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <RCC_Delay+0x38>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a5b      	lsrs	r3, r3, #9
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012f8:	bf00      	nop
  }
  while (Delay --);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f9      	bne.n	80012f8 <RCC_Delay+0x1c>
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000000 	.word	0x20000000
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e03f      	b.n	80013aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff f80a 	bl	8000358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	; 0x24
 8001348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800135a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f9a3 	bl	80016a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2220      	movs	r2, #32
 800139c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b08a      	sub	sp, #40	; 0x28
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b20      	cmp	r3, #32
 80013d0:	d17c      	bne.n	80014cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_UART_Transmit+0x2c>
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e075      	b.n	80014ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_UART_Transmit+0x3e>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e06e      	b.n	80014ce <HAL_UART_Transmit+0x11c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2221      	movs	r2, #33	; 0x21
 8001402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001406:	f7ff f8d7 	bl	80005b8 <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001420:	d108      	bne.n	8001434 <HAL_UART_Transmit+0x82>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d104      	bne.n	8001434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	e003      	b.n	800143c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001444:	e02a      	b.n	800149c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2200      	movs	r2, #0
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f8df 	bl	8001614 <UART_WaitOnFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e036      	b.n	80014ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10b      	bne.n	800147e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	3302      	adds	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	e007      	b.n	800148e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001492:	b29b      	uxth	r3, r3
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1cf      	bne.n	8001446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2200      	movs	r2, #0
 80014ae:	2140      	movs	r1, #64	; 0x40
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f8af 	bl	8001614 <UART_WaitOnFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e006      	b.n	80014ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2220      	movs	r2, #32
 80014c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e000      	b.n	80014ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80014cc:	2302      	movs	r3, #2
  }
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b08a      	sub	sp, #40	; 0x28
 80014da:	af02      	add	r7, sp, #8
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	f040 8089 	bne.w	800160a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <HAL_UART_Receive+0x2e>
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e081      	b.n	800160c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_UART_Receive+0x40>
 8001512:	2302      	movs	r3, #2
 8001514:	e07a      	b.n	800160c <HAL_UART_Receive+0x136>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2222      	movs	r2, #34	; 0x22
 8001528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800152c:	f7ff f844 	bl	80005b8 <HAL_GetTick>
 8001530:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	88fa      	ldrh	r2, [r7, #6]
 8001536:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	88fa      	ldrh	r2, [r7, #6]
 800153c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001546:	d108      	bne.n	800155a <HAL_UART_Receive+0x84>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d104      	bne.n	800155a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	e003      	b.n	8001562 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800156a:	e043      	b.n	80015f4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2200      	movs	r2, #0
 8001574:	2120      	movs	r1, #32
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f84c 	bl	8001614 <UART_WaitOnFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e042      	b.n	800160c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10c      	bne.n	80015a6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	b29b      	uxth	r3, r3
 8001594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001598:	b29a      	uxth	r2, r3
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	3302      	adds	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	e01f      	b.n	80015e6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ae:	d007      	beq.n	80015c0 <HAL_UART_Receive+0xea>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10a      	bne.n	80015ce <HAL_UART_Receive+0xf8>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	e008      	b.n	80015e0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1b6      	bne.n	800156c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001624:	e02c      	b.n	8001680 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d028      	beq.n	8001680 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <UART_WaitOnFlagUntilTimeout+0x30>
 8001634:	f7fe ffc0 	bl	80005b8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	429a      	cmp	r2, r3
 8001642:	d21d      	bcs.n	8001680 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001652:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e00f      	b.n	80016a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4013      	ands	r3, r2
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	429a      	cmp	r2, r3
 800169c:	d0c3      	beq.n	8001626 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016e2:	f023 030c 	bic.w	r3, r3, #12
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <UART_SetConfig+0x114>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d103      	bne.n	8001718 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001710:	f7ff fdd0 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	e002      	b.n	800171e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001718:	f7ff fdb8 	bl	800128c <HAL_RCC_GetPCLK1Freq>
 800171c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009a      	lsls	r2, r3, #2
 8001728:	441a      	add	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <UART_SetConfig+0x118>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	0119      	lsls	r1, r3, #4
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009a      	lsls	r2, r3, #2
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fbb2 f2f3 	udiv	r2, r2, r3
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <UART_SetConfig+0x118>)
 8001756:	fba3 0302 	umull	r0, r3, r3, r2
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	fb00 f303 	mul.w	r3, r0, r3
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	3332      	adds	r3, #50	; 0x32
 8001768:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <UART_SetConfig+0x118>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	4419      	add	r1, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fbb2 f2f3 	udiv	r2, r2, r3
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <UART_SetConfig+0x118>)
 800178e:	fba3 0302 	umull	r0, r3, r3, r2
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	fb00 f303 	mul.w	r3, r0, r3
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	3332      	adds	r3, #50	; 0x32
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <UART_SetConfig+0x118>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	f003 020f 	and.w	r2, r3, #15
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	440a      	add	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40013800 	.word	0x40013800
 80017c0:	51eb851f 	.word	0x51eb851f

080017c4 <__libc_init_array>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	2600      	movs	r6, #0
 80017c8:	4d0c      	ldr	r5, [pc, #48]	; (80017fc <__libc_init_array+0x38>)
 80017ca:	4c0d      	ldr	r4, [pc, #52]	; (8001800 <__libc_init_array+0x3c>)
 80017cc:	1b64      	subs	r4, r4, r5
 80017ce:	10a4      	asrs	r4, r4, #2
 80017d0:	42a6      	cmp	r6, r4
 80017d2:	d109      	bne.n	80017e8 <__libc_init_array+0x24>
 80017d4:	f000 f822 	bl	800181c <_init>
 80017d8:	2600      	movs	r6, #0
 80017da:	4d0a      	ldr	r5, [pc, #40]	; (8001804 <__libc_init_array+0x40>)
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <__libc_init_array+0x44>)
 80017de:	1b64      	subs	r4, r4, r5
 80017e0:	10a4      	asrs	r4, r4, #2
 80017e2:	42a6      	cmp	r6, r4
 80017e4:	d105      	bne.n	80017f2 <__libc_init_array+0x2e>
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
 80017e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ec:	4798      	blx	r3
 80017ee:	3601      	adds	r6, #1
 80017f0:	e7ee      	b.n	80017d0 <__libc_init_array+0xc>
 80017f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f6:	4798      	blx	r3
 80017f8:	3601      	adds	r6, #1
 80017fa:	e7f2      	b.n	80017e2 <__libc_init_array+0x1e>
 80017fc:	0800185c 	.word	0x0800185c
 8001800:	0800185c 	.word	0x0800185c
 8001804:	0800185c 	.word	0x0800185c
 8001808:	08001860 	.word	0x08001860

0800180c <memset>:
 800180c:	4603      	mov	r3, r0
 800180e:	4402      	add	r2, r0
 8001810:	4293      	cmp	r3, r2
 8001812:	d100      	bne.n	8001816 <memset+0xa>
 8001814:	4770      	bx	lr
 8001816:	f803 1b01 	strb.w	r1, [r3], #1
 800181a:	e7f9      	b.n	8001810 <memset+0x4>

0800181c <_init>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr

08001828 <_fini>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr
